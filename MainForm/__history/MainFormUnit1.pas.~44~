unit MainFormUnit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ToolWin, ActnMan, ActnCtrls,
  ActnMenus, Menus, Vcl.Grids, Data.DB, Data.Win.ADODB, Vcl.DBGrids,
  Vcl.DBCtrls, Generics.Collections, Contnrs, Bde.DBTables,
  Vcl.ComCtrls, GetDataSoursUnit1,
  VQNNumberOfDonations,
  VQBBloodProduct,
  VQPProcurementOfTheComponentsTotal,
  VQHHarvestingOfBloodComponentsByTypes,
  UMSMoldCleaning;

type
  TMyMainForm = class(TForm)
    MainMenu1: TMainMenu;
    N2: TMenuItem;
    N3: TMenuItem;
    Help1: TMenuItem;
    CloseButton: TMenuItem;
    N5: TMenuItem;
    N6: TMenuItem;
    N8: TMenuItem;
    HandlyHarvesting: TMenuItem;
    AutoAferez: TMenuItem;
    Citoferez: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    N13: TMenuItem;
    N14: TMenuItem;
    N15: TMenuItem;
    N16: TMenuItem;
    N17: TMenuItem;
    N7: TMenuItem;
    N18: TMenuItem;
    N19: TMenuItem;
    N20: TMenuItem;
    N21: TMenuItem;
    N1: TMenuItem;
    N22: TMenuItem;
    N23: TMenuItem;
    N24: TMenuItem;
    N25: TMenuItem;
    QueryNumberOfDonations: TMenuItem;
    HarvestingBloodComponentsByTypes: TMenuItem;
    BloodProduction: TMenuItem;
    ADOConnection1: TADOConnection;
    ADOQuery1: TADOQuery;
    DataSource1: TDataSource;
    Button1: TButton;
    StringGrid1: TStringGrid;
    procedure CloseButtonClick(Sender: TObject);
    procedure QueryNumberOfDonationsClick(Sender: TObject);
    procedure BloodProductionClick(Sender: TObject);
    procedure N4Click(Sender: TObject);
    procedure ProcurementOfComponentsTotalClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure HarvestingBloodComponentsByTypesClick(Sender: TObject);
  private
    NumberOfDonations: IVQNNumberOfDonations;
    BloodProduct: IBloodProduct;
    ProcurementOfTheComponentsTotal: IProcurementOfTheComponentsTotal;
    HarvestingOfBloodComponentsByTypes: IHarvestingOfBloodComponentsByTypes;
    CleanForm1: TMSMoldCleaning;
  public

    { Public declarations }

  end;

var
  MyMainForm: TMyMainForm;

implementation

{$R *.dfm}
// Запросы/Количество донаций

procedure TMyMainForm.BloodProductionClick(Sender: TObject);
begin

  if not Assigned(CleanForm1) then
    CleanForm1.Free;
  CleanForm1 := TMSMoldCleaning.Create(self);
  CleanForm1.Free;

  if not Assigned(BloodProduct) then
    BloodProduct:=nil;
  BloodProduct := TBloodProduct.Create(self);
end;

procedure TMyMainForm.HarvestingBloodComponentsByTypesClick(Sender: TObject);
begin
  if not Assigned(CleanForm1) then
    CleanForm1.Free;
  CleanForm1 := TMSMoldCleaning.Create(self);
  CleanForm1.Free;

  if not Assigned(HarvestingOfBloodComponentsByTypes) then
    HarvestingOfBloodComponentsByTypes:=nil;
  HarvestingOfBloodComponentsByTypes := THarvestingOfBloodComponentsByTypes.Create(self);

end;

procedure TMyMainForm.QueryNumberOfDonationsClick(Sender: TObject);
begin

  if not Assigned(CleanForm1) then
    CleanForm1.Free;
  CleanForm1 := TMSMoldCleaning.Create(self);
  CleanForm1.Free;

  if not Assigned(NumberOfDonations) then
    NumberOfDonations:=nil;
  NumberOfDonations := TNumberOfDonations.Create(self);

end;



procedure TMyMainForm.Button1Click(Sender: TObject);
begin

  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add
    ('SELECT BloodErSusp.ВидЭВ, Sum(BloodErSusp.КЭВ) AS [Sum-КЭВ], Sum(BloodErSusp.ДЭВ) ' +
     'FROM BloodDoza INNER JOIN BloodErSusp ON BloodDoza.КодД = BloodErSusp.Код ' +
     'WHERE (((BloodDoza.ДатаК) Between #11/1/2017# And #11/30/2017#)) GROUP BY BloodErSusp.ВидЭВ;');
  ADOQuery1.Open;
  stringgrid1.ColWidths[0]:=200;
  stringgrid1.Cells[1, 0]:='Объем';
  stringgrid1.Cells[2, 0]:='Дозы';

  if (ADOQuery1.Recordset.EOF<>true) and (ADOQuery1.Recordset.BOF<>true) then
  begin
  adoquery1.Recordset.MoveFirst;
  while not ADOQuery1.Recordset.EOF do
  begin
    if stringgrid1.Cells[0, 1]<>'' then stringgrid1.RowCount:=stringgrid1.RowCount+1;
    stringgrid1.Cells[0, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[0].value);
    stringgrid1.Cells[1, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[1].value);
    stringgrid1.Cells[2, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[2].value);
    adoquery1.Next;
  end;
  end;
  ADOQuery1.Close;

  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add
    ('SELECT BloodPlasma.ВидПЛ, Sum(BloodPlasma.КПЛ), Sum(BloodPlasma.ДПЛ) ' +
     'FROM (BloodDoza INNER JOIN BloodErSusp ON BloodDoza.КодД = BloodErSusp.Код) ' +
     'INNER JOIN BloodPlasma ON BloodErSusp.Код = BloodPlasma.КодЭ ' +
     'WHERE (((BloodDoza.ДатаК) Between #11/1/2017# And #11/30/2017#)) GROUP BY BloodPlasma.ВидПЛ;');
  ADOQuery1.Open;
  if (ADOQuery1.Recordset.EOF<>true) and (ADOQuery1.Recordset.BOF<>true) then
  begin
  adoquery1.Recordset.MoveFirst;
  while not ADOQuery1.Recordset.EOF do
  begin
    stringgrid1.RowCount:=stringgrid1.RowCount+1;
    stringgrid1.Cells[0, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[0].value);
    stringgrid1.Cells[1, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[1].value);
    stringgrid1.Cells[2, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[2].value);
    adoquery1.Next;
  end;
  end;
  ADOQuery1.Close;

  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add
    ('SELECT PlasmaComponents.ВидПЛП, Sum(PlasmaComponents.КПЛП), Sum(PlasmaComponents.ДПЛП) ' +
     'FROM PlazmaDoza INNER JOIN PlasmaComponents ON PlazmaDoza.КодПл = PlasmaComponents.КодДП ' +
     'WHERE (((PlazmaDoza.ДатаП) Between #11/1/2017# And #11/30/2017#)) GROUP BY PlasmaComponents.ВидПЛП;');
  ADOQuery1.Open;
  if (ADOQuery1.Recordset.EOF<>true) and (ADOQuery1.Recordset.BOF<>true) then
  begin
  adoquery1.Recordset.MoveFirst;
  while not ADOQuery1.Recordset.EOF do
  begin
    stringgrid1.RowCount:=stringgrid1.RowCount+1;
    stringgrid1.Cells[0, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[0].value);
    stringgrid1.Cells[1, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[1].value);
    stringgrid1.Cells[2, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[2].value);
    adoquery1.Next;
  end;
  end;
  ADOQuery1.close;

  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add
    ('SELECT TrombComponents.ВидТ, Sum(TrombComponents.КПЛТ), Sum(TrombComponents.ДПЛТ), Sum(TrombComponents.ПакТ) ' +
     'FROM TrombDoza INNER JOIN TrombComponents ON TrombDoza.КодТ = TrombComponents.КодДТ ' +
     'WHERE (((TrombDoza.ДатаТ) Between #11/1/2017# And #11/30/2017#)) GROUP BY TrombComponents.ВидТ;');
  ADOQuery1.Open;
  if ADOQuery1.Recordset.EOF<>ADOQuery1.Recordset.BOF then
  adoquery1.Recordset.MoveFirst;
  begin
  while not ADOQuery1.Recordset.EOF do
  begin
    stringgrid1.RowCount:=stringgrid1.RowCount+1;
    stringgrid1.Cells[0, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[0].value);
    stringgrid1.Cells[1, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[1].value);
    stringgrid1.Cells[2, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[2].value);
    stringgrid1.Cells[3, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[3].value);
    adoquery1.Next;
  end;
  end;
  ADOQuery1.Close;

end;

procedure TMyMainForm.CloseButtonClick(Sender: TObject);
begin
  Close;
end;

procedure TMyMainForm.N4Click(Sender: TObject);
begin
  if not Assigned(CleanForm1) then
    CleanForm1.Free;
  CleanForm1 := TMSMoldCleaning.Create(self);
  CleanForm1.Free;
end;

procedure TMyMainForm.ProcurementOfComponentsTotalClick(Sender: TObject);
begin

  if not Assigned(CleanForm1) then
    CleanForm1.Free;
  CleanForm1 := TMSMoldCleaning.Create(self);
  CleanForm1.Free;

  if not Assigned(ProcurementOfTheComponentsTotal) then
    ProcurementOfTheComponentsTotal := nil;
  ProcurementOfTheComponentsTotal := TProcurementOfTheComponentsTotal.Create(self);

end;

end.
