unit ConnectivgUnit1_ver2;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ToolWin, ActnMan, ActnCtrls,
  ActnMenus, Menus, Contnrs, Data.DB, Data.Win.ADODB,
  Generics.Collections, Vcl.DBCtrls;



type
 BloodTable = class
 public
    DateK: TDBlistbox;
    KolDon: TDBlistbox;
    OnConservation: TDBlistbox;
    nLaborIssled: TDBlistbox;
    CellBlood: TMemo;
    ConservationBloob: array[1..1000] of Real;
    test: integer;
    test3: string;
    test4: array[1..5] of integer;
    test2:  TDBListBox;
    end;

 { BloodTable = class (TObjectList)
  private
//    DateK: Tlistbox;
    KolDon: Tlistbox;
//    OnConservation: Tlistbox;
//    nLaborIssled: Tlistbox;
//    CellBlood: Tlistbox;
//    ConservationBloob: Tlistbox;
  public
    procedure GetData;
  end;  }

  Connecting = class (TADOQuery) //—оздаем запрос, содержащий некоторую таблицу
  private
    Query: TADOQuery;
  public
    constructor create;
    function GetQ: TADOQuery;

//    procedure GenQuery(qq: TADOQuery);
//    function GetQuery: BloodTable;
  end;
implementation

{ Connecting }

constructor Connecting.create;
begin
  if not Assigned(Query) then
  Query := TADOQuery.create(nil);
  Query.ConnectionString:='Provider=Microsoft.ACE.OLEDB.12.0;' +
  'Data Source=..\AccesBase\Stat_rab_ver.accdb;Persist Security Info=False';
  Query.Close;
  Query.SQL.Clear;
  Query.SQL.Add('SELECT * FROM Blood');
end;

{procedure Connecting.GenQuery(qq: TADOQuery) ;
begin
  qq:=Query;
end;

function Connecting.GetData: BloodTable;
begin

end;

{ BloodTable }

{procedure BloodTable.GetData;
var
  Q: Connecting;
begin
  Q:=connecting.create;
  Q.
end;     }


function Connecting.GetQ: TADOQuery;
begin
  result:=Query;
end;

end.
