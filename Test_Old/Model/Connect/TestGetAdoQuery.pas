unit TestGetAdoQuery;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, GetAdoQuery, SysUtils, Data.Win.ADODB;

type
  // Test methods for class ITempAdoQuery

  TestITempAdoQuery = class(TTestCase)
  strict private
    FITempAdoQuery: ITempAdoQuery;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetConnect;
    procedure Testdestroy;
  end;

implementation

procedure TestITempAdoQuery.SetUp;
begin
  // TODO: Initialize FITempAdoQuery
  FITempAdoQuery := TTempAdoQuery.Create;
end;

procedure TestITempAdoQuery.TearDown;
begin
  FITempAdoQuery := nil;
end;

procedure TestITempAdoQuery.TestGetConnect;
var
  ReturnValue: TADOConnection;
  CurrentDir: String;
  i: integer;
begin
  i:=0;
  CurrentDir:=ExtractFileDir(ExtractFilePath(ExtractFileDir(ExtractFilePath(ExtractFileDir(ExtractFilePath(ExtractFileDir(ExtractFileDir(ParamStr(0)))))))));
  if FileExists(CurrentDir + '\Model\Connect\ConnectingStringx64.udl') then i:=1;
  CheckEquals(1,i,'Файл со строкой подключения отсутствует!');

  CurrentDir:='FILE NAME=' + ExtractFileDir(ExtractFileDir(ParamStr(0)));
  ReturnValue := FITempAdoQuery.GetConnect;
  CheckEquals(ReturnValue.ConnectionString, CurrentDir + '\Model\Connect\ConnectingStringx64.udl', 'ADOConection не создан!');
end;

procedure TestITempAdoQuery.Testdestroy;
begin
  FITempAdoQuery.destroy;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestITempAdoQuery.Suite);
end.

