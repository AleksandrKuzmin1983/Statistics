unit MQHBloodComponents;

interface

uses
  Windows, Messages,   Classes, Graphics, Controls, Forms,
   StdCtrls, Buttons, ToolWin, ActnMan, ActnCtrls,
  ActnMenus, Menus, Vcl.Grids, Data.DB, Vcl.DBGrids,
  Vcl.DBCtrls, Generics.Collections, Contnrs, Bde.DBTables,
  Vcl.ComCtrls,

  SysUtils, Variants, Data.Win.ADODB, Dialogs,
  UCheckNull,
  GetDataSoursUnit1;

type
  IBloodComponents = interface
    function GetName(i: integer): string;
    function GetVolume(i: integer): string;
    function GetNumber(i: integer): string;
    function GetRowCount: integer;
  end;

  TTestRecord=Record
    Name: String;
    Volume: String;
    Number: String;
  end;

  TBloodComponents = class(TInterfacedObject,
    IBloodComponents)
  private
    TempVar2: integer;
    TempVar: string;
    TempConnect: IDataBaseTables;
    TempQuery: TADOQuery;
    CheckNull: TCheckNull;
    TestMass: array of TTestRecord;
  public
    function GetName(i: integer): string;
    function GetVolume(i: integer): string;
    function GetNumber(i: integer): string;
    function GetRowCount: integer;
    constructor create(DateStart, DateEnd: TDate);
  end;

implementation

{ TTheNumberOfTromboDonations }

constructor TBloodComponents.create(DateStart, DateEnd: TDate);
var i: integer;
begin
 { if not Assigned(CheckNull) then
    CheckNull := TCheckNull.create;  }
  if not Assigned(TempConnect) then
    TempConnect := TDataBaseTables.create;
  if not Assigned(TempQuery) then
    TempQuery := TADOQuery.create(nil);
  TempQuery.Connection := TempConnect.GetConnect;
  TempQuery.Close;
  TempQuery.SQL.Clear;
  TempQuery.SQL.Add
  ('SELECT BloodErSusp.ВидЭВ, Sum(BloodErSusp.КЭВ) AS [Sum-КЭВ], Sum(BloodErSusp.ДЭВ) ' +
     'FROM BloodDoza INNER JOIN BloodErSusp ON BloodDoza.КодД = BloodErSusp.Код ' +
     'WHERE (((BloodDoza.ДатаК) Between #' +
    FormatDateTime('mm''/''dd''/''yyyy', DateStart) + '# And #' +
    FormatDateTime('mm''/''dd''/''yyyy', DateEnd) + '#)) GROUP BY BloodErSusp.ВидЭВ;');

  TempQuery.Open;
  SetLength(TestMass, TempQuery.RecordCount);

  if (TempQuery.Recordset.EOF<>true) and (TempQuery.Recordset.BOF<>true) then
  begin
  TempQuery.Recordset.MoveFirst;
  for i:=0 to TempQuery.RecordCount-1 do
  begin
    TestMass[i].Name:=VarToStr(TempQuery.Fields[0].value);
    TestMass[i].Volume:=VarToStr(TempQuery.Fields[1].value);
    TestMass[i].Number:=VarToStr(TempQuery.Fields[2].value);
    TempQuery.Next;
    ShowMessage(TestMass[i].Name);
  end;
  end;

  TempQuery.Close;

{  ADOQuery1.Open;
  stringgrid1.ColWidths[0]:=200;
  stringgrid1.Cells[1, 0]:='Объем';
  stringgrid1.Cells[2, 0]:='Дозы';

  if (ADOQuery1.Recordset.EOF<>true) and (ADOQuery1.Recordset.BOF<>true) then
  begin
  adoquery1.Recordset.MoveFirst;
  while not ADOQuery1.Recordset.EOF do
  begin
    if stringgrid1.Cells[0, 1]<>'' then stringgrid1.RowCount:=stringgrid1.RowCount+1;
    stringgrid1.Cells[0, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[0].value);
    stringgrid1.Cells[1, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[1].value);
    stringgrid1.Cells[2, stringgrid1.RowCount-1]:=VarToStr(ADOQuery1.Fields[2].value);
    adoquery1.Next;
  end;
  end;
  ADOQuery1.Close;}
  TempVar:=TestMass[1].Name;


end;

function TBloodComponents.GetRowCount: integer;
begin
  result:=Length(TestMass);
end;

function TBloodComponents.GetVolume(i: integer): string;
begin
  result := TestMass[i].Volume;
end;

function TBloodComponents.GetName(i: integer): string ;
begin
  result := TestMass[i].Name;
end;

function TBloodComponents.GetNumber(i: integer): string;
begin
  result := TestMass[i].Number;
end;

end.
